{"version":3,"sources":["../server/run-email-worker.ts","../server/services/emailService.ts","../shared/schema.ts","../server/db.ts","../server/storage.ts","../server/workers/emailWorker.ts"],"sourcesContent":["import 'dotenv/config';\nimport { emailWorker } from './workers/emailWorker';\n\nconsole.log('Starting the dedicated email worker process...');\nemailWorker.start();","import { MailService } from '@sendgrid/mail';\nimport jwt from 'jsonwebtoken';\nimport { storage } from '../storage';\n\nif (!process.env.SENDGRID_API_KEY) {\n  console.warn(\"SENDGRID_API_KEY environment variable not set\");\n}\n\nconst mailService = new MailService();\nif (process.env.SENDGRID_API_KEY) {\n  mailService.setApiKey(process.env.SENDGRID_API_KEY);\n}\n\nconst FROM_EMAIL = process.env.SENDGRID_FROM_EMAIL || \"relacionamento@cdpipharma.com.br\";\n\ninterface TicketEmailData {\n  userName: string;\n  eventTitle: string;\n  eventDate: Date;\n  eventLocation: string;\n  qrCodeData: string;\n  orderId: string;\n  qrCodeS3Url: string;\n}\n\nclass EmailService {\n  async sendEmail(\n    to: string,\n    subject: string,\n    html: string,\n    text?: string,\n    attachments?: Array<{ filename: string; content: string; type: string }>\n  ): Promise<boolean> {\n    if (!process.env.SENDGRID_API_KEY) {\n      console.log(\"SendGrid not configured, queuing email:\", { to, subject });\n      await storage.addEmailToQueue({\n        to,\n        subject,\n        html,\n        text,\n        attachments: attachments ? JSON.stringify(attachments) : null,\n      });\n      return true;\n    }\n\n    try {\n      const emailPayload: any = {\n        to,\n        from: { email: FROM_EMAIL, name: \"CDPI Pass\" },\n        subject,\n        html,\n        text,\n      };\n\n      // Only add attachments if provided\n      if (attachments && attachments.length > 0) {\n        emailPayload.attachments = attachments;\n      }\n\n      await mailService.send(emailPayload);\n      return true;\n    } catch (error) {\n      console.error('SendGrid email error:', error);\n      await storage.addEmailToQueue({\n        to,\n        subject,\n        html,\n        text,\n        attachments: attachments ? JSON.stringify(attachments) : null,\n      });\n      return false;\n    }\n  }\n\n  async sendVerificationEmail(email: string, userId: string): Promise<boolean> {\n    // Generate a 6-digit code\n    const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();\n    // Set an expiration time (15 minutes from now)\n    const expiresAt = new Date(Date.now() + 15 * 60 * 1000);\n\n    // Store the code and its expiration in the database\n    await storage.updateUser(userId, {\n        emailVerificationCode: verificationCode,\n        emailVerificationCodeExpiresAt: expiresAt,\n    });\n\n    const html = `\n      <h1>Confirme seu email - CDPI Pass</h1>\n      <p>Seu c√≥digo de verifica√ß√£o √©:</p>\n      <h2><b>${verificationCode}</b></h2>\n      <p>Este c√≥digo expira em 15 minutos.</p>\n    `;\n    const text = `Seu c√≥digo de verifica√ß√£o para o CDPI Pass √©: ${verificationCode}`;\n\n    return this.sendEmail(email, \"Seu C√≥digo de Verifica√ß√£o - CDPI Pass\", html, text);\n    }\n\n  async sendTicketEmail(email: string, data: TicketEmailData): Promise<boolean> {\n    const eventDate = new Date(data.eventDate).toLocaleDateString('pt-BR', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n\n    const html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>Seu ingresso - CDPI Pass</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: #0F4C75; color: white; padding: 20px; text-align: center; }\n          .content { padding: 20px; background: #f9f9f9; }\n          .ticket { \n            background: white; \n            border: 2px solid #3282B8; \n            border-radius: 10px; \n            padding: 20px; \n            margin: 20px 0; \n            text-align: center; \n          }\n          .qr-code { \n            margin: 20px 0; \n            padding: 20px; \n            background: white; \n            border: 1px solid #ddd; \n            display: inline-block; \n          }\n          .event-details { text-align: left; margin: 20px 0; }\n          .footer { text-align: center; color: #666; font-size: 12px; margin-top: 20px; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>üé´ Seu Ingresso</h1>\n            <h2>CDPI Pass</h2>\n          </div>\n          <div class=\"content\">\n            <p>Ol√°, <strong>${data.userName}</strong>!</p>\n            <p>Seu pagamento foi confirmado! Aqui est√° seu ingresso para o evento:</p>\n            \n            <div class=\"ticket\">\n              <h3>${data.eventTitle}</h3>\n              <div class=\"event-details\">\n                <p><strong>üìÖ Data:</strong> ${eventDate}</p>\n                <p><strong>üìç Local:</strong> ${data.eventLocation}</p>\n                <p><strong>üéüÔ∏è Pedido:</strong> #${data.orderId}</p>\n              </div>\n              \n              <div class=\"qr-code\">\n                <p><strong>QR Code do Ingresso:</strong></p>\n                <img src=\"${data.qrCodeS3Url}\" alt=\"QR Code do Ingresso\" style=\"max-width: 256px; height: auto; display: block; margin: 10px auto;\">\n                <p style=\"font-size: 12px; color: #666;\">\n                  Apresente este QR Code na entrada do evento\n                </p>\n              </div>\n            </div>\n            \n            <div style=\"background: #BBE1FA; padding: 15px; border-radius: 5px; margin: 20px 0;\">\n              <h4>üìã Instru√ß√µes Importantes:</h4>\n              <ul style=\"text-align: left;\">\n                <li>Chegue com 30 minutos de anteced√™ncia</li>\n                <li>O QR Code pode ser apresentado impresso ou no celular</li>\n                <li>Em caso de d√∫vidas, entre em contato conosco</li>\n              </ul>\n            </div>\n          </div>\n          <div class=\"footer\">\n            <p>CDPI Pass</p>\n            <p>relacionamento@cdpipharma.com.br | +55 (62) 99860-6833</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    const text = `\n      CDPI Pass - Seu Ingresso\n      \n      Ol√°, ${data.userName}!\n      \n      Seu pagamento foi confirmado! Detalhes do evento:\n      \n      Evento: ${data.eventTitle}\n      Data: ${eventDate}\n      Local: ${data.eventLocation}\n      Pedido: #${data.orderId}\n      \n      Importante: Seu QR Code est√° anexado neste email. Para visualiz√°-lo, abra este email em HTML ou acesse sua conta no site.\n      \n      Apresente o QR Code na entrada do evento.\n      Chegue com 30 minutos de anteced√™ncia e traga um documento com foto.\n    `;\n\n    return this.sendEmail(email, `Seu ingresso para ${data.eventTitle} - CDPI Pass`, html, text);\n  }\n\n  async processEmailQueue(): Promise<void> {\n    if (!process.env.SENDGRID_API_KEY) {\n      console.log(\"SendGrid not configured, skipping email queue processing\");\n      return;\n    }\n\n    const pendingEmails = await storage.getPendingEmails();\n    \n    for (const email of pendingEmails) {\n      try {\n        await mailService.send({\n          to: email.to,\n          from: { email: FROM_EMAIL, name: \"CDPI Pass\" },\n          subject: email.subject,\n          html: email.html || '',\n          text: email.text || '',\n        });\n        \n        await storage.updateEmailStatus(email.id, \"sent\");\n        console.log(`Email sent successfully to ${email.to}`);\n      } catch (error) {\n        console.error(`Failed to send email to ${email.to}:`, error);\n        await storage.updateEmailStatus(email.id, \"failed\");\n      }\n    }\n  }\n\n  async sendPasswordResetEmail(email: string, userId: string): Promise<boolean> {\n    // Create a password reset token that expires in 30 minutes\n    const resetToken = jwt.sign(\n        { userId, type: 'password-reset' },\n        process.env.JWT_SECRET || 'your-secret-key',\n        { expiresIn: '30m' }\n    );\n\n    const resetLink = `https://cdpipass.com.br/reset-password?token=${resetToken}`;\n\n    const html = `\n        <h1>Redefini√ß√£o de Senha</h1>\n        <p>Voc√™ solicitou a redefini√ß√£o de sua senha. Clique no link abaixo para criar uma nova:</p>\n        <a href=\"${resetLink}\">Redefinir Senha</a>\n        <p>Este link expirar√° em 30 minutos.</p>\n    `;\n    const text = `Acesse este link para redefinir sua senha: ${resetLink}`;\n\n    return this.sendEmail(email, \"Redefini√ß√£o de Senha - CDPI Pass\", html, text);\n  }\n\n  async sendCourtesyMassEmail(\n    email: string,\n    name: string,\n    eventName: string,\n    courtesyCode: string,\n    eventDate: Date,\n    attachments?: Array<{ filename: string; content: string; type: string }>\n  ): Promise<boolean> {\n    const redeemUrl = `${process.env.BASE_URL}/cortesia?code=${courtesyCode}`;\n    const subject = `Sua cortesia para o evento ${eventName}`;\n\n    const formattedEventDate = new Date(eventDate).toLocaleDateString('pt-BR', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n\n    const redeemByDate = new Date(eventDate);\n    redeemByDate.setDate(redeemByDate.getDate() - 6);\n    const formattedRedeemByDate = redeemByDate.toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    });\n\n    const html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>${subject}</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: #0F4C75; color: white; padding: 20px; text-align: center; }\n          .content { padding: 20px; background: #f9f9f9; text-align: center; }\n          .message-box { text-align: left; margin: 20px 0; }\n          .cta-button {\n            background-color: #3282B8;\n            color: white;\n            padding: 15px 25px;\n            text-decoration: none;\n            border-radius: 5px;\n            font-size: 16px;\n            display: inline-block;\n            margin: 20px 0;\n          }\n          .important-notice {\n            background: #BBE1FA;\n            padding: 15px;\n            border-radius: 5px;\n            margin: 20px 0;\n            text-align: left;\n          }\n          .footer { text-align: center; color: #666; font-size: 12px; margin-top: 20px; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>üéÅ Voc√™ Recebeu uma Cortesia!</h1>\n            <h2>CDPI Pass</h2>\n          </div>\n          <div class=\"content\">\n            <div class=\"message-box\">\n              <p style=\"font-size: 18px;\">Ol√°, <strong>${name}</strong>!</p>\n              <p>Voc√™ recebeu uma cortesia para o <strong>${eventName}</strong> na data <strong>${formattedEventDate}</strong>!</p>\n              <p style=\"font-style: italic; color: #333;\">\n                Um evento que amplia horizontes e conecta quem faz a diferen√ßa na ind√∫stria. Oportunidade √≠mpar para voc√™ dominar o Ciclo de Vida do Medicamento e acelerar a sua trajet√≥ria profissional!\n              </p>\n              <p>Para resgatar seu ingresso, clique no bot√£o abaixo:</p>\n            </div>\n            \n            <a href=\"${redeemUrl}\" class=\"cta-button\">Resgatar Ingresso Agora</a>\n            \n            <div class=\"important-notice\">\n            <p>Ou se preferir, voc√™ pode resgatar a cortesia por meio do nosso site com o c√≥digo:    <strong>${courtesyCode}</strong></p>\n              <h4>‚ö†Ô∏è Instru√ß√µes Importantes:</h4>\n              <p>\n                √â importante fazer o resgate da sua cortesia imediatamente ou <strong>at√© dia ${formattedRedeemByDate}</strong> para garantir sua vaga e participar do evento.\n              </p>\n            </div>\n          </div>\n          <div class=\"footer\">\n            <p>Atenciosamente,<br>Equipe CDPI Pass</p>\n            <p>relacionamento@cdpipharma.com.br | +55 (62) 99860-6833</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    const text = `\n      Ol√°, ${name}!\n\n      Voc√™ recebeu uma cortesia para o ${eventName} na data ${formattedEventDate}!\n\n      Um evento que amplia horizontes e conecta quem faz a diferen√ßa na ind√∫stria.\n      Oportunidade √≠mpar para voc√™ dominar o Ciclo de Vida do Medicamento e acelerar a sua trajet√≥ria profissional!\n\n      Para resgatar seu ingresso, acesse o seguinte link:\n      ${redeemUrl}\n\n      ‚ö†Ô∏è Importante fazer o resgate da sua cortesia imediatamente ou at√© dia ${formattedRedeemByDate} para garantir sua vaga e participar do evento.\n\n      Atenciosamente,\n      Equipe CDPI Pass\n    `;\n\n    return this.sendEmail(email, subject, html, text, attachments);\n  }\n}\n\n\nexport const emailService = new EmailService();\n","import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  pgTable,\n  varchar,\n  text,\n  timestamp,\n  decimal,\n  boolean,\n  integer,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  emailVerified: boolean(\"email_verified\").default(false),\n  password: text(\"password\").notNull(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  cpf: varchar(\"cpf\", { length: 14 }).notNull().unique(),\n  phone: varchar(\"phone\", { length: 20 }).notNull(),\n  birthDate: timestamp(\"birth_date\").notNull(),\n  address: text(\"address\").notNull(),\n  partnerCompany: varchar(\"partner_company\", { length: 255 }),\n  isAdmin: boolean(\"is_admin\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  emailVerificationCode: varchar(\"email_verification_code\", { length: 6 }),\n  emailVerificationCodeExpiresAt: timestamp(\"email_verification_code_expires_at\"),\n});\n\n// Events table\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  location: varchar(\"location\", { length: 255 }).notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  imageUrl: varchar(\"image_url\", { length: 500 }),\n  maxAttendees: integer(\"max_attendees\"),\n  currentAttendees: integer(\"current_attendees\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Courtesy Links table\nexport const courtesyLinks = pgTable(\"courtesy_links\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\", { length: 100 }).notNull().unique(),\n  eventId: varchar(\"event_id\").notNull().references(() => events.id),\n  ticketCount: integer(\"ticket_count\").notNull().default(1),\n  usedCount: integer(\"used_count\").default(0),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Orders table\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  eventId: varchar(\"event_id\").notNull().references(() => events.id),\n  courtesyAttendeeId: varchar(\"courtesy_attendee_id\").references(() => courtesyAttendees.id),\n  cpf: varchar(\"cpf\", { length: 14 }).notNull(),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"pending\"), // pending, paid, cancelled, courtesy\n  paymentMethod: varchar(\"payment_method\", { length: 50 }).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  asaasPaymentId: varchar(\"asaas_payment_id\", { length: 255 }),\n  courtesyLinkId: varchar(\"courtesy_link_id\").references(() => courtesyLinks.id),\n  qrCodeData: text(\"qr_code_data\"),\n  qrCodeUsed: boolean(\"qr_code_used\").default(false),\n  qrCodeUsedAt: timestamp(\"qr_code_used_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  qr_code_s3_url: varchar(\"qr_code_s3_url\", { length: 500 }),\n});\n\n// Email queue table for async processing\nexport const emailQueue = pgTable(\"email_queue\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  to: varchar(\"to\", { length: 255 }).notNull(),\n  subject: varchar(\"subject\", { length: 255 }).notNull(),\n  html: text(\"html\"),\n  text: text(\"text\"),\n  attachments: text('attachments'),\n  status: varchar(\"status\", { length: 50 }).default(\"pending\"), // pending, sent, failed\n  attempts: integer(\"attempts\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  processedAt: timestamp(\"processed_at\"),\n});\n\n// Courtesy Attendees table\nexport const courtesyAttendees = pgTable(\"courtesy_attendees\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  email: varchar(\"email\", { length: 255 }).notNull(),\n  cpf: varchar(\"cpf\", { length: 14 }).notNull(),\n  phone: varchar(\"phone\", { length: 20 }).notNull(),\n  birthDate: timestamp(\"birth_date\").notNull(),\n  address: text(\"address\").notNull(),\n  partnerCompany: varchar(\"partner_company\", { length: 255 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  orders: many(orders),\n  courtesyLinks: many(courtesyLinks),\n}));\n\nexport const eventsRelations = relations(events, ({ many }) => ({\n  orders: many(orders),\n  courtesyLinks: many(courtesyLinks),\n}));\n\nexport const ordersRelations = relations(orders, ({ one }) => ({\n  user: one(users, {\n    fields: [orders.userId],\n    references: [users.id],\n  }),\n  event: one(events, {\n    fields: [orders.eventId],\n    references: [events.id],\n  }),\n  courtesyLink: one(courtesyLinks, {\n    fields: [orders.courtesyLinkId],\n    references: [courtesyLinks.id],\n  }),\n  courtesyAttendee: one(courtesyAttendees, {\n    fields: [orders.courtesyAttendeeId],\n    references: [courtesyAttendees.id],\n  }),\n}));\n\nexport const courtesyLinksRelations = relations(courtesyLinks, ({ one, many }) => ({\n  event: one(events, {\n    fields: [courtesyLinks.eventId],\n    references: [events.id],\n  }),\n  createdByUser: one(users, {\n    fields: [courtesyLinks.createdBy],\n    references: [users.id],\n  }),\n  orders: many(orders),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users, {\n  email: z.string().email(\"Email inv√°lido\"),\n  cpf: z.string().regex(/^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/, \"CPF deve estar no formato 000.000.000-00\"),\n  phone: z.string().regex(/^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$/, \"Telefone deve estar no formato (00) 00000-0000\"),\n  password: z.string().min(6, \"Senha deve ter pelo menos 6 caracteres\"),\n  name: z.string().min(2, \"Nome deve ter pelo menos 2 caracteres\"),\n  address: z.string().min(10, \"Endere√ßo deve ter pelo menos 10 caracteres\"),\n  birthDate: z.date({ required_error: \"Data de nascimento √© obrigat√≥ria\" }),\n}).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  emailVerified: true,\n  isAdmin: true,\n});\n\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  currentAttendees: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  qrCodeData: true,\n  qrCodeUsed: true,\n  qrCodeUsedAt: true,\n});\n\nexport const insertEmailQueueSchema = createInsertSchema(emailQueue).omit({\n  id: true,\n  createdAt: true,\n  processedAt: true,\n  status: true,\n  attempts: true,\n});\n\nexport const insertCourtesyLinkSchema = createInsertSchema(courtesyLinks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  usedCount: true,\n});\n\nexport const insertCourtesyAttendeeSchema = createInsertSchema(courtesyAttendees).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Event = typeof events.$inferSelect;\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type EmailQueue = typeof emailQueue.$inferSelect;\nexport type InsertEmailQueue = z.infer<typeof insertEmailQueueSchema>;\nexport type CourtesyLink = typeof courtesyLinks.$inferSelect;\nexport type InsertCourtesyLink = z.infer<typeof insertCourtesyLinkSchema>;\nexport type CourtesyAttendee = typeof courtesyAttendees.$inferSelect;\nexport type InsertCourtesyAttendee = z.infer<typeof insertCourtesyAttendeeSchema>;\n\n// Login schema\nexport const loginSchema = z.object({\n  email: z.string().email(\"Email inv√°lido\"),\n  password: z.string().min(1, \"Senha √© obrigat√≥ria\"),\n});\n\nexport type LoginRequest = z.infer<typeof loginSchema>;\n\n// Courtesy redemption schema\nexport const courtesyRedemptionSchema = z.object({\n  name: z.string().min(2, \"Nome deve ter pelo menos 2 caracteres\"),\n  email: z.string().email(\"Email inv√°lido\"),\n  emailConfirm: z.string().email(\"Email inv√°lido\"),\n  cpf: z.string().regex(/^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/, \"CPF deve estar no formato 000.000.000-00\"),\n  partnerCompany: z.string().min(2, \"Empresa parceira √© obrigat√≥ria\"),\n  birthDate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Data deve estar no formato AAAA-MM-DD\"),\n  address: z.string().min(10, \"Endere√ßo deve ter pelo menos 10 caracteres\"),\n  phone: z.string().regex(/^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$/, \"Telefone deve estar no formato (00) 00000-0000\"),\n}).refine((data) => data.email === data.emailConfirm, {\n  message: \"Os emails n√£o coincidem\",\n  path: [\"emailConfirm\"],\n});\n\nexport type CourtesyRedemption = z.infer<typeof courtesyRedemptionSchema>;\n","import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport \"dotenv/config\";\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","import {\n  users,\n  events,\n  orders,\n  emailQueue,\n  courtesyLinks,\n  courtesyAttendees,\n  type User,\n  type InsertUser,\n  type Event,\n  type InsertEvent,\n  type Order,\n  type InsertOrder,\n  type EmailQueue,\n  type InsertEmailQueue,\n  type CourtesyLink,\n  type InsertCourtesyLink,\n  type CourtesyAttendee,\n  type InsertCourtesyAttendee,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql, asc, count, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByCpf(cpf: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  verifyUserEmail(id: string): Promise<boolean>;\n  deleteUser(id: string): Promise<boolean>;\n\n  // Event operations\n  getEvents(): Promise<Event[]>;\n  getEvent(id: string): Promise<Event | undefined>;\n  createEvent(event: InsertEvent): Promise<Event>;\n  updateEvent(id: string, updates: Partial<Event>): Promise<Event | undefined>;\n\n  // Order operations\n  getOrder(id: string): Promise<Order | undefined>;\n  getOrdersByUser(userId: string, page: number, limit: number): Promise<{ orders: Order[]; total: number }>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined>;\n  getOrderByAsaasPaymentId(paymentId: string): Promise<Order | undefined>;\n  isCpfAlreadyRegisteredForEvent(cpf: string, eventId: string): Promise<boolean>;\n  createCourtesyAttendee(attendee: InsertCourtesyAttendee): Promise<CourtesyAttendee>;\n\n  // Email queue operations\n  addEmailToQueue(email: InsertEmailQueue): Promise<EmailQueue>;\n  getPendingEmails(): Promise<EmailQueue[]>;\n  updateEmailStatus(id: string, status: string, processedAt?: Date): Promise<void>;\n\n  // Courtesy link operations\n  createCourtesyLink(link: InsertCourtesyLink): Promise<CourtesyLink>;\n  getCourtesyLinkByCode(code: string): Promise<CourtesyLink | undefined>;\n  getCourtesyLinksByCreator(userId: string, page: number, limit: number): Promise<{ links: CourtesyLink[]; total: number }>;\n  updateCourtesyLink(id: string, updates: Partial<CourtesyLink>): Promise<CourtesyLink | undefined>;\n  incrementCourtesyLinkUsage(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async getUserByCpf(cpf: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.cpf, cpf));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...userData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async verifyUserEmail(id: string): Promise<boolean> {\n    const [user] = await db\n      .update(users)\n      .set({ emailVerified: true, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return !!user;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    // Delete user's orders first (due to foreign key constraint)\n    await db.delete(orders).where(eq(orders.userId, id));\n    \n    // Then delete the user\n    const result = await db.delete(users).where(eq(users.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Event operations\n  async getEvents(): Promise<Event[]> {\n    const startOfToday = new Date();\n    startOfToday.setHours(0, 0, 0, 0);\n    \n    return await db\n      .select()\n      .from(events)\n      .where(eq(events.isActive, true))\n      .orderBy(asc(events.date));\n  }\n\n  async getEvent(id: string): Promise<Event | undefined> {\n    const [event] = await db.select().from(events).where(eq(events.id, id));\n    return event;\n  }\n\n  async createEvent(eventData: InsertEvent): Promise<Event> {\n    const [event] = await db\n      .insert(events)\n      .values({\n        ...eventData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return event;\n  }\n\n  async updateEvent(id: string, updates: Partial<Event>): Promise<Event | undefined> {\n    const [event] = await db\n      .update(events)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(events.id, id))\n      .returning();\n    return event;\n  }\n\n  // Order operations\n  async getOrder(id: string): Promise<Order | undefined> {\n    const [order] = await db.select().from(orders).where(eq(orders.id, id));\n    return order;\n  }\n\n  async getOrdersByUser(userId: string, page: number = 1, limit: number = 10): Promise<{ orders: Order[]; total: number }> {\n    const offset = (page - 1) * limit;\n    \n    const ordersQuery = db\n      .select({\n        id: orders.id,\n        userId: orders.userId,\n        eventId: orders.eventId,\n        status: orders.status,\n        paymentMethod: orders.paymentMethod,\n        amount: orders.amount,\n        asaasPaymentId: orders.asaasPaymentId,\n        courtesyLinkId: orders.courtesyLinkId,\n        qrCodeData: orders.qrCodeData,\n        qr_code_s3_url: orders.qr_code_s3_url,\n        qrCodeUsed: orders.qrCodeUsed,\n        qrCodeUsedAt: orders.qrCodeUsedAt,\n        createdAt: orders.createdAt,\n        updatedAt: orders.updatedAt,\n        event: {\n          id: events.id,\n          title: events.title,\n          description: events.description,\n          date: events.date,\n          location: events.location,\n          price: events.price,\n          imageUrl: events.imageUrl,\n        },\n      })\n      .from(orders)\n      .leftJoin(events, eq(orders.eventId, events.id))\n      .where(eq(orders.userId, userId))\n      .orderBy(desc(orders.createdAt))\n      .limit(limit)\n      .offset(offset);\n\n    const totalQuery = db\n      .select({ value: count() })\n      .from(orders)\n      .where(eq(orders.userId, userId));\n\n    const [ordersResult, totalResult] = await Promise.all([ordersQuery, totalQuery]);\n    \n    return {\n      orders: ordersResult,\n      total: totalResult[0].value,\n    };\n  }\n  \n\n  async createOrder(orderData: InsertOrder): Promise<Order> {\n    const [order] = await db\n      .insert(orders)\n      .values({\n        ...orderData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return order;\n  }\n\n  async createCourtesyAttendee(attendee: InsertCourtesyAttendee): Promise<CourtesyAttendee> {\n    const [newAttendee] = await db\n      .insert(courtesyAttendees)\n      .values(attendee)\n      .returning();\n    return newAttendee;\n  }\n\n  async updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined> {\n    const [order] = await db\n      .update(orders)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(orders.id, id))\n      .returning();\n    return order;\n  }\n\n  async getOrderByAsaasPaymentId(paymentId: string): Promise<Order | undefined> {\n    const [order] = await db\n      .select()\n      .from(orders)\n      .where(eq(orders.asaasPaymentId, paymentId));\n    return order;\n  }\n\n  async isCpfAlreadyRegisteredForEvent(cpf: string, eventId: string): Promise<boolean> {  \n  const existingOrder = await db.select().from(orders).where(\n    and(\n      eq(orders.cpf, cpf),\n      eq(orders.eventId, eventId)\n    )\n  ).limit(1);\n\n  return existingOrder.length > 0;\n  }\n\n  // Email queue operations\n  async addEmailToQueue(emailData: InsertEmailQueue): Promise<EmailQueue> {\n    const [email] = await db\n      .insert(emailQueue)\n      .values({\n        ...emailData,\n        createdAt: new Date(),\n      })\n      .returning();\n    return email;\n  }\n\n  async getPendingEmails(): Promise<EmailQueue[]> {\n    return await db\n      .select()\n      .from(emailQueue)\n      .where(eq(emailQueue.status, \"pending\"))\n      .orderBy(emailQueue.createdAt);\n  }\n\n  async updateEmailStatus(id: string, status: string, processedAt?: Date): Promise<void> {\n    await db\n      .update(emailQueue)\n      .set({ \n        status, \n        processedAt: processedAt || new Date(),\n        attempts: sql`attempts + 1` \n      })\n      .where(eq(emailQueue.id, id));\n  }\n\n  async deleteOrder(id: string): Promise<void> {\n    await db.delete(orders).where(eq(orders.id, id));\n  }\n\n  async getPendingOrders(): Promise<Order[]> {\n    return await db\n      .select()\n      .from(orders)\n      .where(eq(orders.status, \"pending\"));\n  }\n\n  // Courtesy link operations\n  async createCourtesyLink(linkData: InsertCourtesyLink): Promise<CourtesyLink> {\n    const [link] = await db\n      .insert(courtesyLinks)\n      .values({\n        ...linkData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return link;\n  }\n\n  async getCourtesyLinkByCode(code: string): Promise<CourtesyLink | undefined> {\n    const [link] = await db\n      .select()\n      .from(courtesyLinks)\n      .where(eq(courtesyLinks.code, code));\n    return link;\n  }\n\n  async getCourtesyLinksByCreator(userId: string, page: number = 1, limit: number = 10): Promise<{ links: CourtesyLink[]; total: number }> {\n    const offset = (page - 1) * limit;\n\n    const linksQuery = db\n      .select()\n      .from(courtesyLinks)\n      .where(eq(courtesyLinks.createdBy, userId))\n      .orderBy(desc(courtesyLinks.createdAt))\n      .limit(limit)\n      .offset(offset);\n\n    const totalQuery = db\n      .select({ value: count() })\n      .from(courtesyLinks)\n      .where(eq(courtesyLinks.createdBy, userId));\n\n    const [linksResult, totalResult] = await Promise.all([linksQuery, totalQuery]);\n\n    return {\n      links: linksResult,\n      total: totalResult[0].value,\n    };\n  }\n\n  async updateCourtesyLink(id: string, updates: Partial<CourtesyLink>): Promise<CourtesyLink | undefined> {\n    const [link] = await db\n      .update(courtesyLinks)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(courtesyLinks.id, id))\n      .returning();\n    return link;\n  }\n\n  async incrementCourtesyLinkUsage(id: string): Promise<void> {\n    await db\n      .update(courtesyLinks)\n      .set({ \n        usedCount: sql`used_count + 1`,\n        updatedAt: new Date()\n      })\n      .where(eq(courtesyLinks.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","import { emailService } from '../services/emailService';\nimport { storage } from '../storage';\n\ninterface EmailJob {\n  id: string;\n  type: 'verification' | 'ticket' | 'generic';\n  data: any;\n  attempts: number;\n  maxAttempts: number;\n}\n\nclass EmailWorker {\n  private isRunning = false;\n  private processInterval: NodeJS.Timeout | null = null;\n  private readonly PROCESS_INTERVAL = 2000; // 2 seconds\n  private readonly MAX_CONCURRENT_JOBS = 5;\n\n  start(): void {\n    if (this.isRunning) {\n      console.log('Email worker is already running');\n      return;\n    }\n\n    this.isRunning = true;\n    console.log('Starting email worker...');\n    \n    this.processInterval = setInterval(() => {\n      this.processEmailQueue();\n    }, this.PROCESS_INTERVAL);\n  }\n\n  stop(): void {\n    if (!this.isRunning) {\n      console.log('Email worker is not running');\n      return;\n    }\n\n    this.isRunning = false;\n    console.log('Stopping email worker...');\n    \n    if (this.processInterval) {\n      clearInterval(this.processInterval);\n      this.processInterval = null;\n    }\n  }\n\n  async processEmailQueue(): Promise<void> {\n    if (!this.isRunning) return;\n\n    try {\n      const pendingEmails = await storage.getPendingEmails();\n      \n      if (pendingEmails.length === 0) {\n        return;\n      }\n\n      console.log(`Processing ${pendingEmails.length} pending emails`);\n      \n      // Process emails in batches\n      const emailsToProcess = pendingEmails.slice(0, this.MAX_CONCURRENT_JOBS);\n      \n      const processPromises = emailsToProcess.map(email => \n        this.processEmailJob(email)\n      );\n\n      await Promise.allSettled(processPromises);\n    } catch (error) {\n      console.error('Error processing email queue:', error);\n    }\n  }\n\n  private async processEmailJob(email: any): Promise<void> {\n    try {\n      console.log(`Processing email job ${email.id} to ${email.to}`);\n      \n      const success = await emailService.sendEmail(\n        email.to,\n        email.subject,\n        email.html || '',\n        email.text || ''\n      );\n\n      if (success) {\n        await storage.updateEmailStatus(email.id, 'sent');\n        console.log(`Email sent successfully to ${email.to}`);\n      } else {\n        await this.handleEmailFailure(email);\n      }\n    } catch (error) {\n      console.error(`Error processing email job ${email.id}:`, error);\n      await this.handleEmailFailure(email);\n    }\n  }\n\n  private async handleEmailFailure(email: any): Promise<void> {\n    const maxAttempts = 3;\n    \n    if (email.attempts >= maxAttempts) {\n      await storage.updateEmailStatus(email.id, 'failed');\n      console.error(`Email job ${email.id} failed after ${maxAttempts} attempts`);\n    } else {\n      // Keep as pending for retry\n      console.log(`Email job ${email.id} failed, will retry (attempt ${email.attempts + 1}/${maxAttempts})`);\n    }\n  }\n\n  async addEmailJob(emailData: {\n    to: string;\n    subject: string;\n    html?: string;\n    text?: string;\n  }): Promise<void> {\n    try {\n      await storage.addEmailToQueue(emailData);\n      console.log(`Added email job to queue: ${emailData.to}`);\n    } catch (error) {\n      console.error('Error adding email job to queue:', error);\n      throw error;\n    }\n  }\n\n  async getQueueStatus(): Promise<{\n    pending: number;\n    failed: number;\n    sent: number;\n  }> {\n    // This would require additional storage methods to count by status\n    // For now, return basic info\n    const pendingEmails = await storage.getPendingEmails();\n    \n    return {\n      pending: pendingEmails.length,\n      failed: 0, // Would need to implement this query\n      sent: 0,   // Would need to implement this query\n    };\n  }\n\n  isWorkerRunning(): boolean {\n    return this.isRunning;\n  }\n}\n\nexport const emailWorker = new EmailWorker();\n\n// Start the worker if this module is imported\n// if (process.env.EMAIL_QUEUE_ENABLED !== 'false') {\n//   emailWorker.start();\n// }\n\n// // Graceful shutdown\n// process.on('SIGTERM', () => {\n//   console.log('Received SIGTERM, stopping email worker...');\n//   emailWorker.stop();\n// });\n\n// process.on('SIGINT', () => {\n//   console.log('Received SIGINT, stopping email worker...');\n//   emailWorker.stop();\n// });\n"],"mappings":"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","names":["sql","text"]}